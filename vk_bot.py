import logging
import random
import redis
from environs import Env
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

from data_parsing import get_question_and_answer  # –ò–º–ø–æ—Ä—Ç —Å–ª–æ–≤–∞—Ä—è QA

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [
    ['–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å', '–°–¥–∞—Ç—å—Å—è'],
    ['–ú–æ–π —Å—á—ë—Ç']
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

redis_conn = redis.StrictRedis(host='localhost', port=6379, db=0, decode_responses=True)

qa_dict = get_question_and_answer()


def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω!',
        reply_markup=markup
    )


def handle_new_question(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    question = random.choice(list(qa_dict.keys()))
    answer = qa_dict[question]

    redis_conn.set(f"user:{user_id}:question", question)
    redis_conn.set(f"user:{user_id}:answer", answer)

    update.message.reply_text(question)


def handle_give_up(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    answer = redis_conn.get(f"user:{user_id}:answer")

    if answer:
        update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
    else:
        update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

    redis_conn.delete(f"user:{user_id}:question")
    redis_conn.delete(f"user:{user_id}:answer")


def handle_score(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    score = redis_conn.get(f"user:{user_id}:score") or 0
    update.message.reply_text(f"–í–∞—à —Å—á—ë—Ç: {score}")


def handle_solution_attempt(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_answer = update.message.text.strip().lower()
    correct_answer = redis_conn.get(f"user:{user_id}:answer")

    if not correct_answer:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'.")
        return

    if user_answer == correct_answer.lower():
        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
        redis_conn.incr(f"user:{user_id}:score")
        redis_conn.delete(f"user:{user_id}:question")
        redis_conn.delete(f"user:{user_id}:answer")
    else:
        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def main():
    env = Env()
    env.read_env()

    telegram_token = env.str("TELEGRAM_TOKEN")

    updater = Updater(telegram_token)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.regex("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"), handle_new_question))
    dispatcher.add_handler(MessageHandler(Filters.regex("–°–¥–∞—Ç—å—Å—è"), handle_give_up))
    dispatcher.add_handler(MessageHandler(Filters.regex("–ú–æ–π —Å—á—ë—Ç"), handle_score))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_solution_attempt))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
