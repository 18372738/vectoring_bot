import logging
import random
import redis

from enum import Enum, auto
from environs import Env
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler,)

from data_parsing import get_question_and_answer


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class Quiz(Enum):
    NEW_QUESTION = auto()
    ANSWER = auto()


def start(update: Update, context: CallbackContext) -> Quiz:
    markup = context.bot_data['markup']
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω!',
        reply_markup=markup
    )
    return Quiz.NEW_QUESTION


def handle_new_question(update: Update, context: CallbackContext) -> Quiz:
    redis_config = context.bot_data['redis_config']
    question_and_answer = context.bot_data['question_and_answer']
    user_id = update.effective_user.id
    question = random.choice(list(question_and_answer.keys()))
    answer = question_and_answer[question]

    redis_config.set(f"user:{user_id}:question", question)
    redis_config.set(f"user:{user_id}:answer", answer)

    update.message.reply_text(question)
    return Quiz.ANSWER


def handle_solution_attempt(update: Update, context: CallbackContext) -> Quiz:
    redis_config = context.bot_data['redis_config']
    user_id = update.effective_user.id
    user_answer = update.message.text.strip().lower()
    correct_answer = redis_config.get(f"user:{user_id}:answer")

    if not correct_answer:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'.")
        return Quiz.NEW_QUESTION

    if is_correct_answer(user_answer, correct_answer):
        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
        redis_config.incr(f"user:{user_id}:score")
        redis_config.delete(f"user:{user_id}:question")
        redis_config.delete(f"user:{user_id}:answer")
        return Quiz.NEW_QUESTION
    else:
        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return Quiz.ANSWER


def handle_give_up(update: Update, context: CallbackContext) -> Quiz:
    redis_config = context.bot_data['redis_config']
    question_and_answer = context.bot_data['question_and_answer']
    user_id = update.effective_user.id
    answer = redis_config.get(f"user:{user_id}:answer")

    if answer:
        update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
    else:
        update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

    redis_config.delete(f"user:{user_id}:question")
    redis_config.delete(f"user:{user_id}:answer")

    question = random.choice(list(question_and_answer.keys()))
    new_answer = question_and_answer[question]

    redis_config.set(f"user:{user_id}:question", question)
    redis_config.set(f"user:{user_id}:answer", new_answer)

    update.message.reply_text(question)
    return Quiz.ANSWER


def handle_score(update: Update, context: CallbackContext) -> None:
    redis_config = context.bot_data['redis_config']
    user_id = update.effective_user.id
    score = redis_config.get(f"user:{user_id}:score") or 0
    update.message.reply_text(f"–í–∞—à —Å—á—ë—Ç: {score}")


def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
    return ConversationHandler.END


def is_correct_answer(user_answer, correct_answer):
    clean_answer = correct_answer.split('.')[0].split('(')[0].strip().lower()
    return clean_answer in user_answer.lower()


def main():
    env = Env()
    env.read_env()
    telegram_token = env.str("TELEGRAM_TOKEN")

    keyboard = [['–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å', '–°–¥–∞—Ç—å—Å—è'], ['–ú–æ–π —Å—á—ë—Ç']]

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    redis_config = redis.StrictRedis(
        host='localhost',
        port=6379,
        db=0,
        decode_responses=True
    )

    question_and_answer = get_question_and_answer()

    updater = Updater(telegram_token)
    dispatcher = updater.dispatcher
    dispatcher.bot_data['markup'] = markup
    dispatcher.bot_data['redis_config'] = redis_config
    dispatcher.bot_data['question_and_answer'] = question_and_answer

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(Filters.text("–ú–æ–π —Å—á—ë—Ç"), handle_score),
        ],
        states={
            Quiz.NEW_QUESTION: [
                CommandHandler("cancel", cancel),
                MessageHandler(Filters.text("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"), handle_new_question),
                MessageHandler(Filters.text("–ú–æ–π —Å—á—ë—Ç"), handle_score),
            ],
            Quiz.ANSWER: [
                CommandHandler("cancel", cancel),
                MessageHandler(Filters.text("–ú–æ–π —Å—á—ë—Ç"), handle_score),
                MessageHandler(Filters.text("–°–¥–∞—Ç—å—Å—è"), handle_give_up),
                MessageHandler(Filters.text, handle_solution_attempt),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
